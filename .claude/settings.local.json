{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(cargo check:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(cargo run:*)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo run --example list_album_tracks -- \"Exile on Main Street\" \"The Rolling Stones\")",
      "Bash(rg:*)",
      "Bash(direnv exec . cargo run --example debug_album_html -- \"Abbey Road\" \"The Beatles\")",
      "Bash(RUST_LOG=debug direnv exec . cargo run --example debug_album_html -- \"Abbey Road\" \"The Beatles\")",
      "Bash(RUST_LOG=debug direnv exec . cargo run --example debug_album_html -- \"Abbey Road\" \"The Beatles\" 2 >& 1)",
      "Bash(direnv exec:*)",
      "Bash(cargo clippy:*)",
      "Bash(cargo fmt:*)",
      "Bash(rustc:*)",
      "Bash(./test_regex)",
      "Bash(cargo clean:*)",
      "Bash(mkdir:*)",
      "Bash(cargo test:*)",
      "Bash(LASTFM_DEBUG_SAVE_RESPONSES=1 cargo run --example remove_remaster -- \"Neil Young\" 2 >& 1)",
      "Bash(RUST_LOG=warn LASTFM_DEBUG_SAVE_RESPONSES=1 cargo run --example remove_remaster -- \"The Velvet Underground\" 2 >& 1)",
      "Bash(RUST_LOG=warn LASTFM_DEBUG_SAVE_RESPONSES=1 timeout 30s cargo run --example remove_remaster -- \"The Velvet Underground\" 2 >& 1)",
      "Bash(cargo fix:*)",
      "Bash(LASTFM_DEBUG_SAVE_RESPONSES=1 timeout 10s cargo run --example remove_remaster -- \"The Velvet Underground\" 2>&1)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(ls:*)",
      "Bash(cargo:*)",
      "Bash(LASTFM_DEBUG_SAVE_RESPONSES=1 cargo run --example list_recent_tracks 60)",
      "Bash(find:*)",
      "Bash(cp:*)",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(sed:*)",
      "Bash(done)",
      "Bash(if ! grep -q \"\\.next()\\.await\" \"$file\")",
      "Bash(then)",
      "Bash(fi)",
      "WebFetch(domain:docs.rs)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(cat:*)",
      "Bash(SCROBBLE_SCRUBBER_LASTFM_USERNAME=test_user SCROBBLE_SCRUBBER_LASTFM_PASSWORD=test_pass SCROBBLE_SCRUBBER_PROVIDERS_ENABLE_OPENAI=true SCROBBLE_SCRUBBER_PROVIDERS_OPENAI_API_KEY=sk-test123 cargo run -- --help)",
      "Bash(echo:*)",
      "Bash(just readme)",
      "Bash(just clippy:*)",
      "Bash(just:*)",
      "WebFetch(domain:crates.io)",
      "Bash(git tag:*)",
      "Bash(git fetch:*)",
      "Bash(git rebase:*)",
      "Bash(if grep -q \"use lastfm_edit::\" \"$file\")",
      "Bash(! grep -q \"LastFmEditClient\" \"$file\")",
      "Bash(git pull:*)",
      "Bash(RUST_LOG=debug direnv exec . cargo run --example test_album_tracks \"Radiohead\" \"In Rainbows\")",
      "Bash(RUST_LOG=lastfm_edit=debug direnv exec . cargo run --example debug_album_url)",
      "Bash(RUST_LOG=lastfm_edit=debug direnv exec . cargo run --example test_album_tracks \"Radiohead\" \"In Rainbows\")",
      "Bash(VCR_RECORD=true cargo test test_login_and_discover_queen_scrobbles --test vcr_integration_test -- --nocapture)",
      "Bash(VCR_RECORD=true cargo test test_simple_vcr_functionality --test simple_vcr_test -- --nocapture)",
      "Bash(LASTFM_EDIT_USERNAME=test LASTFM_EDIT_PASSWORD=test cargo test test_login_and_discover_queen_scrobbles -- --nocapture)",
      "Bash(VCR_RECORD=true LASTFM_EDIT_USERNAME=test LASTFM_EDIT_PASSWORD=test cargo test test_login_and_discover_queen_scrobbles -- --nocapture)",
      "Bash(awk:*)",
      "Bash(diff:*)",
      "Bash(VCR_RECORD=true cargo test --features vcr test_login_and_get_recent_tracks -- --nocapture)",
      "Bash(python3:*)",
      "Bash(VCR_RECORD=true cargo test --features vcr vcr_lastfm_auth_tests::test_login_and_get_recent_tracks -- --nocapture)",
      "Bash(RUST_LOG=debug cargo test --test compare_csrf_tokens --features vcr -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=trace cargo test --test vcr_login_test -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test --test vcr_login_test -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test --test vcr_login_test vcr_login_test -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test --test vcr_login_test direct_login_test -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test -- vcr_login_test --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test -- direct_login_test --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test -- debug_login_vcr_issue --nocapture)",
      "Bash(RUST_LOG=http_client_vcr=debug cargo test vcr::edit::edit_track -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test vcr::edit::edit_track -- --nocapture)",
      "Bash(RUST_LOG=debug cargo test vcr::edit::edit_track -- --nocapture 2 >& 1)",
      "Bash(RUST_LOG=lastfm_edit::vcr_matcher=trace cargo test vcr::edit::edit_track -- --nocapture)",
      "Bash(time cargo test vcr::edit -- --nocapture)",
      "Bash(RUST_LOG=debug cargo test vcr::edit -- --nocapture)",
      "Bash(LAST_FM_VCR_RECORD=filter cargo test vcr::login::login)",
      "Bash(LAST_FM_VCR_RECORD=filter RUST_LOG=debug cargo test vcr::login::login)",
      "Bash(LAST_FM_VCR_RECORD=filter RUST_LOG=trace cargo test vcr::login::login 2 >& 1)",
      "Bash(LAST_FM_VCR_RECORD=filter cargo test vcr::login)",
      "Bash(LAST_FM_VCR_RECORD=1 cargo test vcr::login)",
      "Bash(RUST_LOG=debug cargo test vcr::login -- --nocapture)",
      "Bash(RUST_LOG=lastfm_edit=debug cargo test vcr::album_tracks -- --nocapture)",
      "Bash(LAST_FM_VCR_RECORD=record cargo test vcr::album_tracks -- --nocapture)",
      "Bash(LAST_FM_VCR_RECORD=filter cargo test vcr::login -- --nocapture)",
      "Bash(LAST_FM_VCR_RECORD=record cargo test vcr::login -- --nocapture)"
    ],
    "deny": []
  }
}